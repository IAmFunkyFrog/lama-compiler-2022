-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

fun binop (op) {
  [s (op), fun (l, op, r) {Binop (op, l, r)}]
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
        exp = memo $ eta expr   ({
                                [Left, {binop("!!")}],
                                [Left, {binop("&&")}],
                                [Nona, {binop("=="), binop("!="), binop("<="), binop(">="), binop("<"), binop(">")}],
                                [Left, {binop("+"), binop("-")}],
                                [Left, {binop("*"), binop("/"), binop("%")}]
                                }, primary);

var  stmt  = memo $ eta syntax (
        x=lident s[":="] e=exp { Assn (x, e) }
      | s1=stmt s[";"] s2=stmt end { Seq (s1, s2) }
      | kSkip { Skip }
      | kRead x=inbr[s("("), lident, s(")")] { Read (x) }
      | kWrite e=inbr[s("("), exp, s(")")] { Write (e) }
      | kIf cond=exp kThen s1=stmt kElse s2=stmt kFi { If (cond, s1, s2) }
      | kWhile cond=exp kDo s=stmt kOd { While (exp, s) }
      | kDo s=stmt kWhile cond=exp kOd { DoWhile (s, cond) }
      | kFor s1=stmt s[","] cond=exp s[","] s2=stmt kDo s3=stmts kOd { Seq (s1, While (cond, Seq (s3, s2))) }
);

-- Public top-level parser
public parse = stmt;
             
