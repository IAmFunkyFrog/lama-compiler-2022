-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInstruction (c, ins) {
  var stack = c[0], st = c[1], w = c[2];

  case ins of
    READ      -> (
      var readedWorld = w.readWorld;
      var value = readedWorld.fst, newWorld = readedWorld.snd;
      [value : stack, st, newWorld]
    )
  | WRITE     -> (
      var value = stack.hd, stackTail = stack.tl;
      [stackTail, st, writeWorld(value, w)]
    )
  | BINOP (binop) -> (
      var rarg = stack.hd, ytail = stack.tl;
      var larg = ytail.hd, stackTail = ytail.tl;
      var value = evalBinop (binop) (larg, rarg);
      [value : stackTail, st, w]
    ) 
  | LD    (x) -> [st (x) : stack, st, w]
  | ST    (x) -> (
      var value = stack.hd, stackTail = stack.tl;
      [stackTail, st <- [x, value], w]
    )
  | CONST (n) -> [n : stack, st, w]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(evalInstruction, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Const (n)                   -> { CONST (n) }
  | Var (name)                  -> { LD (name) }
  | Binop (binop, lexpr, rexpr) -> compileExpr (lexpr) +++ compileExpr (rexpr) +++ { BINOP (binop) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr (expr) +++ { ST (x) }
  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Read (x) -> { READ, ST (x) }
  | Write (expr) -> compileExpr(expr) +++ { WRITE }
  esac
}
