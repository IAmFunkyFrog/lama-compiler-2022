-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {

  fun evalInstruction (c, ins) {
    var stack = c[0], st = c[1], w = c[2];

    case ins of
      READ      -> (
        var readedWorld = w.readWorld;
        var value = readedWorld.fst, newWorld = readedWorld.snd;
        [value : stack, st, newWorld]
      )
    | WRITE     -> (
        var value = stack.hd, stackTail = stack.tl;
        [stackTail, st, writeWorld(value, w)]
      )
    | BINOP (binop) -> (
        var rarg = stack.hd, ytail = stack.tl;
        var larg = ytail.hd, stackTail = ytail.tl;
        var value = evalBinop (binop) (larg, rarg);
        [value : stackTail, st, w]
      )
    | LD    (x) -> [st (x) : stack, st, w]
    | ST    (x) -> (
        var value = stack.hd, stackTail = stack.tl;
        [stackTail, st <- [x, value], w]
      )
    | CONST (n) -> [n : stack, st, w]
    esac
  }

  case insns of
      ins : insns ->
        case ins of
          LABEL (_) -> eval (env, c, insns)
        | JMP (lab) -> eval (env, c, env.fromLabel (lab))
        | CJMP (cond, lab) -> (
           var stack = c[0], st = c[1], w = c[2];
           case stack of
              x : stack -> eval (env, [stack, st, w], if (case cond of "nz" -> x | "z" -> x == 0 esac) then env.fromLabel (lab) else insns fi)
           esac
        )
        | _ -> eval (env, evalInstruction(c, ins), insns)
        esac
    | {  } -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {

  fun compileExprHelper(expr) {
    case expr of
        Const (n)                   -> { CONST (n) }
      | Var (name)                  -> { LD (name) }
      | Binop (binop, lexpr, rexpr) -> compileExprHelper (lexpr) +++ compileExprHelper (rexpr) +++ { BINOP (binop) }
    esac
  }

  listBuffer(compileExprHelper(expr))
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (lab, env, s1) of
                [_, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [_, env, s2Code] -> [
                        true,
                        env,
                        compileExpr(cond) <+> singletonBuffer(CJMP("z", s2Lab)) <+> s1Code <+> singletonBuffer(JMP(lab)) <+> singletonBuffer(LABEL(s2Lab)) <+> s2Code
                    ]
                  esac
             esac
        esac
    | While (cond, body) ->
        case env.genLabel of
          [condLabel, env] ->
            case compile (condLabel, env, body) of
              [_, env, bodyCode] -> [
                  true,
                  env,
                  singletonBuffer(LABEL(condLabel)) <+> compileExpr(cond) <+> singletonBuffer(CJMP("z", lab)) <+> bodyCode <+> singletonBuffer(JMP(condLabel))
              ]
            esac
        esac
    | DoWhile (body, cond) -> compile (lab, env, Seq (body, While (cond, body)))
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
