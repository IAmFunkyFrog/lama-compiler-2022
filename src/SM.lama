-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  | META (m)         -> sprintf ("META %s", m.string)
  | PATT (p)         -> sprintf ("PATT %s", p.string)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}                  -> m
            | LABEL (lab) : tl    -> rec ([addMap (m, lab, insns), tl])
            | _ : tl              -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  -- printf("label %s\n", lab);
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
      fun evalSimpleInstruction (c@[stack, cst, st, w], ins) {
        case ins of
          BINOP (binop) -> (
            var rarg = stack.hd, ytail = stack.tl;
            var larg = ytail.hd, stackTail = ytail.tl;
            var value = evalOp (binop, larg, rarg);
            [value : stackTail, cst, st, w]
        )
        | LD    (x) -> [lookup (st, x) : stack, cst, st, w]
        | LDA   (x) -> [x : stack, cst, st, w]
        | ST    (x) -> (
            var value = stack.hd;
            assign (st, x, value);
            [stack, cst, st, w]
        )
        | STI       -> (
            var value = stack.hd, ytail = stack.tl;
            var ref = ytail.hd, stackTail = ytail.tl;
            assign (st, ref, value);
            [value : stackTail, cst, st, w]
        )
        | CONST (n)  -> [n : stack, cst, st, w]
        | DROP       -> [stack.tl, cst, st, w]
        | DUP        -> [stack.hd : stack, cst, st, w]
        | PATT (pat) -> (
            var value = stack.hd, stackTail = stack.tl;

            -- printf("pattern matching: \n");
            case [pat, value] of
              [Array (s), x@#array]              -> [(x.length == s) : stackTail, cst, st, w]
            | [Sexp (name, s), Sexp (x, values)] -> [(values.length == s && compare (name, x) == 0) : stackTail, cst, st, w]
            | _                                  -> [0 : stackTail, cst, st, w]
            esac
        )
        | META (meta) -> (
            case meta of
              MF (loc) -> error ("match failure", loc)
            esac
        )
        | STRING (s) -> [s : stack, cst, st, w]
        | ARRAY (n)  -> (
            case take (stack, n) of
                [stack, taken] -> [listArray (taken) : stack, cst, st, w]
            esac
        )
        | SEXP (name, n)  -> (
            case take (stack, n) of
                [stack, taken] -> [Sexp (name, listArray(taken)) : stack, cst, st, w]
            esac
        )
        | ELEM -> (
            var index = stack.hd, ytail = stack.tl;
            var arr = ytail.hd, stackTail = ytail.tl;
            case arr of
              Sexp (_, arr) -> [arr[index] : stackTail, cst, st, w]
            | _ -> [arr[index] : stackTail, cst, st, w]
            esac
        )
        | STA -> (
            case stack of
                value : smth : ytail ->
                case smth of
                      index@#val -> (
                        var arr = ytail.hd, stackTail = ytail.tl;
                        case arr of
                          Sexp (_, arr) -> arr[index] := value
                        | _ -> arr[index] := value
                        esac;
                        [value : stackTail, cst, st, w]
                    )
                    | ref -> (
                        assign (st, ref, value);
                        [value : ytail, cst, st, w]
                    )
                esac
            esac
        )
        esac
      }

      case insns of
          ins : insns ->
            -- printf("last: %s\n", showSMInsn(ins));
            case ins of
              LABEL (_) -> eval (c, insns)
            | JMP (lab) -> eval (c, env.fromLabel (lab))
            | CJMP (cond, lab) -> (
               var stack = c[0], st = c[2], w = c[3];
               case stack of
                  x : stack -> eval ([stack, cst, st, w], if (case cond of "nz" -> x | "z" -> x == 0 esac) then env.fromLabel (lab) else insns fi)
               esac
            )
            | BEGIN (_, nargs, nlocals) -> (
                case take (st, nargs) of
                    [st, taken] -> eval ([st, cst, [listArray (taken), initArray (nlocals, fun (_) { 0 })], w], insns)
                esac
            )
            | GLOBAL (name) -> assign (s, Glb (name), 0); eval (c, insns)
            | CALL (fLabel, _) -> eval ([st, [s, insns] : cst, s, w], env.fromLabel(fLabel))
            | BUILTIN (name, nArgs) -> (
                case take (st, nArgs) of
                    [st, args] -> case evalBuiltin (name, args, w) of
                        [result, newWorld] -> eval ([result : st, cst, s, newWorld], insns)
                    esac
                esac
            )
            | END -> (
                case cst of
                  {} -> c
                | [s, insns] : cst -> eval ([st, cst, s, w], insns)
                esac
            )
            | _ -> eval (evalSimpleInstruction(c, ins), insns)
            esac
        | {  } -> c
      esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("%s\n", showSM (insns));
  -- printf("====");
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }


  fun compileFuns (env) {

    fun compileFun ([startEnv, code], fn) {
        case fn of
            Fun (fLabel, args, body, state) -> (
                case genLabel (addArgs (beginFun (startEnv, state), args)) of
                    [funLab, env] -> case compile (funLab, env, body) of
                        [funLabUsed, env, bodyCode] -> [env, code <+> listBuffer({ LABEL (fLabel), BEGIN (fLabel, args.size, getLocals (env)) }) <+> bodyCode <+> label (funLab, funLabUsed) <+ END]
                    esac
                esac
            )
        esac
    }

    var result = case getFuns(env) of
      [functions, env] -> foldl(compileFun, [env, emptyBuffer()], functions)
    esac;

    result.snd
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal (env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Scope (ds, sexpr)     -> (
        var newEnv = beginScope(env);
        var globals = foldl(fun (l, def) {
            case def of
              Var (x)                -> if isGlobal (newEnv) then l +++ x else l fi
            | Val (x)                -> if isGlobal (newEnv) then l +++ x else l fi
            | _ -> l
            esac
        }, {}, ds);
        var envWithDefsAndRememberFunctions = foldl(fun ([e, rf], def) {
            case def of
              Var (x)                -> [addVars(e, x), rf]
            | Val (x)                -> [addVars(e, x), rf]
            | fn@Fun (name, args, body) -> (
                case genFunLabel(e, name) of
                    [fLabel, env] -> (
                        [addFun (env, name, fLabel, args.size), [fn, fLabel] : rf]
                    )
                esac
            )
            esac
        }, [newEnv, {}], ds);
        var envToResult = foldl(fun (e, [fn, fLabel]){
            case fn of
              Fun (_, args, body) -> rememberFun (e, fLabel, args, body)
            esac
        }, envWithDefsAndRememberFunctions.fst, envWithDefsAndRememberFunctions.snd);
        var result = compile (lab, envToResult, sexpr);
        case result of
            [endLabUsed, env, code] -> [endLabUsed, endScope(env), foldl(fun (buf, name) { buf <+ GLOBAL (name) }, emptyBuffer(), globals) <+> code]
        esac
    )
    | Call (name, args) -> (
        case lookupFun (env, name) of
          Fun (fLabel, nargs) -> (
            if nargs != args.size
            then error (sprintf ("the function ""%s"" was called with ""%d"" parameters, expected ""%d""", name, nargs, args.size), getLoc (name))
            fi;
            case genLabel(env) of
              [callLab, env] -> (
                var compiledArgs = compile (callLab, env, foldl (fun (seq, a) { Seq (seq, a) }, Skip, args));
                case compiledArgs of
                  [callLabUsed, env, code] ->
                  if fLabel[0] != '$'
                  then [false, env, code <+> label (callLab, callLabUsed) <+ CALL (fLabel, nargs)]
                  else [false, env, code <+> label (callLab, callLabUsed) <+ BUILTIN (name, nargs)]
                  fi
                esac
              )
            esac
          )
        esac
    )
    | Binop (binop, lexpr, rexpr) -> (
        case env.genLabels(2) of
            [lab1, lab2, env] -> case compile (lab1, env, lexpr) of
                [lab1Used, env, code1] -> case compile (lab2, env, rexpr) of
                    [lab2Used, env, code2] -> [false, env, code1 <+> label (lab1, lab1Used) <+> code2 <+> label (lab2, lab2Used) <+ BINOP (binop)]
                esac
            esac
        esac
    )
    | Ignore (e)     -> (
        case env.genLabel of
            [lab, env] -> case compile (lab, env, e) of
                [labUsed, env, code] -> [false, env, code <+> label (lab, labUsed) <+ DROP]
            esac
        esac
    )
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (lookupVar (env, x)) <+ DROP]
    | Write (e)      -> (
        case env.genLabel of
            [lab, env] -> case compile (lab, env, e) of
                [labUsed, env, code] -> [false, env, code <+> label (lab, labUsed) <+ WRITE]
            esac
        esac
    )
    | Assn  (x, e)   -> (
        case env.genLabels(2) of
            [lab1, lab2, env] -> case compile (lab1, env, x) of
                [lab1Used, env, code1] -> case compile (lab2, env, e) of
                    [lab2Used, env, code2] -> [false, env, code1 <+> label (lab1, lab1Used) <+> code2 <+> label (lab2, lab2Used) <+ STA]
                esac
            esac
        esac
    )
    | Seq   (e1, e2) -> (
        case env.genLabel of
          [e2Lab, env] ->
             case compile (e2Lab, env, e1) of
               [e2LabUsed, env, e1Code] ->
                  case compile (lab, env, e2) of
                    [labUsed, env, e2Code] -> [labUsed, env, e1Code <+> label (e2Lab, e2LabUsed) <+> e2Code]
                  esac
             esac
        esac
    )
    | If (cond, e1, e2) -> (
        case env.genLabels(2) of
          [e2Lab, condLab, env] ->
             case compile (lab, env, e1) of
                [_, env, e1Code] ->
                  case compile (lab, env, e2) of
                    [_, env, e2Code] -> case compile(condLab, env, cond) of
                        [condLabUsed, env, condCode] -> [
                            true,
                            env,
                            condCode <+> label (condLab, condLabUsed) <+> singletonBuffer(CJMP("z", e2Lab)) <+> e1Code <+> singletonBuffer(JMP(lab)) <+> singletonBuffer(LABEL(e2Lab)) <+> e2Code
                        ]
                    esac
                  esac
             esac
        esac
    )
    | While (cond, body) ->
        case env.genLabels(2) of
          [sLabel, condLabel, env] ->
            case compile (sLabel, env, body) of
              [_, env, bodyCode] -> case compile (condLabel, env, cond) of
                  [condLabelUsed, env, condCode] -> [
                      true,
                      env,
                      singletonBuffer(LABEL(sLabel)) <+> condCode <+> label (condLabel, condLabelUsed) <+> singletonBuffer(CJMP("z", lab)) <+> bodyCode <+> singletonBuffer(JMP(sLabel))
                  ]
              esac
            esac
        esac
    | DoWhile (body, cond) -> compile (lab, env, Seq (body, While (cond, body)))
    | Array (args) -> (
        case genLabel(env) of
            [argsLabel, env] -> case compile (argsLabel, env, foldl(fun (a, arg) { Seq (a, arg) }, Skip, args)) of
                [argsLabelUsed, env, argsCode] -> [false, env, argsCode <+> label (argsLabel, argsLabelUsed) <+ ARRAY (size (args))]
            esac
        esac
    )
    | Elem (arrayExpr, indexExpr) -> (
        case genLabels(env, 2) of
            [arrayLabel, indexLabel, env] -> case compile (arrayLabel, env, arrayExpr) of
                [arrayLabelUsed, env, arrayCode] -> case compile (indexLabel, env, indexExpr) of
                    [indexLabelUsed, env, indexCode] -> [false, env, arrayCode <+> indexCode <+ ELEM]
                esac
            esac
        esac
    )
    | ElemRef (arrayExpr, indexExpr) -> (
        case genLabels(env, 2) of
            [arrayLabel, indexLabel, env] -> case compile (arrayLabel, env, arrayExpr) of
                [arrayLabelUsed, env, arrayCode] -> case compile (indexLabel, env, indexExpr) of
                    [indexLabelUsed, env, indexCode] -> [false, env, arrayCode <+> indexCode]
                esac
            esac
        esac
    )
    | Set (name, valueExpr) -> compile (lab, env, Assn (Ref (name), valueExpr))
    | String (s) -> [false, env, singletonBuffer(STRING (s))]
    | Sexp (name, args) -> (
        case genLabel(env) of
            [argsLabel, env] -> case compile (argsLabel, env, foldl(fun (a, arg) { Seq (a, arg) }, Skip, args)) of
                [argsLabelUsed, env, argsCode] -> [false, env, argsCode <+> label (argsLabel, argsLabelUsed) <+ SEXP (name, size (args))]
            esac
        esac
    )
    | Case (scrutinee, branches, loc) -> (

        fun max(a, b) {
            if a > b then a else b fi
        }

        fun genDropLab(drop0Lab, depth) {
            sprintf("%s_drop_%d", drop0Lab, depth)
        }

        fun compilePattern(pat, drop0Lab, depth) {

            fun arrayHelper(ps, depth) {
                foldl(fun ([code, index], pat) {
                    [code <+> listBuffer({ DUP, CONST (index), ELEM }) <+> compilePattern(pat, drop0Lab, depth + 1) <+ DROP, index + 1]
                }, [emptyBuffer(), 0], ps)[0]
            }

            case pat of
              Wildcard                            -> emptyBuffer ()
            | Const (n)                           -> listBuffer({ DUP, CONST (n), BINOP ("=="), CJMP("z", genDropLab(drop0Lab, depth))})
            | Array (ps)                          -> listBuffer({ DUP, PATT (Array (size (ps))), CJMP("z", genDropLab(drop0Lab, depth))}) <+> arrayHelper(ps, depth)
            | Sexp (name, ps)                     -> listBuffer({ DUP, PATT (Sexp (name, size(ps))), CJMP("z", genDropLab(drop0Lab, depth))}) <+> arrayHelper(ps, depth)
            | Named (_, p)                        -> compilePattern(p, drop0Lab, depth)
            esac
        }

        fun patternDepth(pat) {
            fun helper(pat, depth) {
                case pat of
                  Wildcard                            -> depth
                | Const (n)                           -> depth
                | Array (ps)                          -> foldl(fun (acc, pat) { max (acc, patternDepth (pat)) }, 0, ps) + depth + 1
                | Sexp (_, ps)                        -> foldl(fun (acc, pat) { max (acc, patternDepth (pat)) }, 0, ps) + depth + 1
                | Named (_, p)                        -> patternDepth (p)
                esac
            }

            helper(pat, 0)
        }

        fun genDrops(drop0Lab, pat) {
            fun helper (code, depth) {
                if depth > 0 then helper (code <+ LABEL (genDropLab (drop0Lab, depth)) <+ DROP, depth - 1) else code <+ LABEL (genDropLab (drop0Lab, 0)) fi
            }

            var maxDepth = patternDepth (pat);

            helper(emptyBuffer (), maxDepth)
        }

        fun compileBranches() {
            foldl(fun ([env, emittedCode], [pat, expr]) {
                case genLabel(env) of
                    [drop0Lab, env] -> case compilePattern(pat, drop0Lab, 0) of
                        patternCode -> case compile (lab, env, expr) of
                            [_, env, branchCode] -> [env, emittedCode <+> patternCode <+ DROP <+> branchCode <+ JMP (lab) <+> genDrops (drop0Lab, pat)]
                        esac
                    esac
                esac
            }, [env, emptyBuffer()], branches)
        }

        case compile (lab, env, Var (scrutinee)) of
            [_, env, loadScrutineeCode] -> case compileBranches () of
                [env, branchesCode] -> [true, env, loadScrutineeCode <+> branchesCode <+ META (MF (loc)) ]
            esac
        esac
    )
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ listBuffer ({ LABEL ("main"), BEGIN ("main", 0, getLocals (env))} ) <+> code <+> label (endLab, endLabUsed) <+> singletonBuffer(END) <+> compileFuns (env)
       esac
  esac
}
