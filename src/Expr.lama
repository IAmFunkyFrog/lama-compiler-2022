-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Val     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)  |
--        Sexp    (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (y) -> y
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (n)        -> [c, n]
  | Var (x)          -> [c, lookupVal(s, x)]
  | Ref (x)          -> lookupVal(s, x); [c, Ref (x)]
  | Scope (ds, e)    -> (
    var newScope = foldl(fun (s, def) {
        case def of
          Var (x)                -> addNames (s, x)
        | Fun (name, args, body) -> addFunction (s, name, args, body)
        esac
    }, enterScope(s), ds);
    var result = eval([newScope, w], e);
    case result of
        [[newScope, w], v] -> [[leaveScope(newScope), w], v]
    esac
  )
  | Call (name, args) -> (
    case lookup(s, name) of
      Fun (_, External) -> eval (c, Builtin (name, args))
    | Fun (funArgs, body) -> (
        if funArgs.size != args.size
        then error (sprintf ("the function ""%s"" was called with ""%d"" parameters, expected ""%d""", name, funArgs.size, args.size), getLoc (name))
        fi;
        case evalList(c, args) of
          [[s, w], evaluatedArgs] -> (
            var fState = foldl(fun (s, [x, v]) { addName(s, x, Val (v)) }, enterFunction(s), zip (funArgs, evaluatedArgs));
            case eval ([fState, w], body) of
              [[fState, w], v] -> [[leaveFunction(s, getGlobal(fState)), w], v]
            esac
          )
        esac
      )
    esac
  )
  | Ignore (e)       -> case eval(c, e) of [c, _] -> [c, None] esac
  | Binop (op, l, r) -> (
        case eval (c, l) of
            [c, lvalue] -> case eval (c, r) of
                  [c, rvalue] -> [c, evalOp (op, lvalue, rvalue)]
                | _ -> failure ("Should not reach")
            esac
            | _ -> failure ("Should not reach")
        esac
    )
  | Skip             -> [c, None]
  | Set(x, e)        -> eval (c, Assn (Ref (x), e))
  | Assn (l, r)      -> (
        case eval (c, l) of
              [c, Ref (x)] -> case eval (c, r) of
                  [[s, w], v] -> [[s <- [x, Val (v)], w], v]
                | _ -> failure ("Should not reach")
              esac
            | [c, ElemRef (arr, index)] -> case eval (c, r) of
                [[s, w], v] -> arr[index] := v; [[s, w], v]
              | _ -> failure ("Should not reach")
              esac
        esac
  )
  | Seq (e1, e2)     -> (
        case eval (c, e1) of
            [c, _] -> eval (c, e2)
        esac
    )
  | If (cond, thenB, elseB) -> (
        case eval (c, cond) of
              [c, v] -> if v then eval (c, thenB) else eval (c, elseB) fi
            | _ -> failure ("Should not reach")
        esac
    )
  | While (cond, body)      -> (
        case eval (c, cond) of
              [c, v] ->
              if v
              then case eval (c, body) of [c, _] -> eval (c, expr) esac
              else [c, None]
              fi
            | _ -> failure ("Should not reach")
        esac
    )
  | DoWhile (body, cond)    -> (
        case eval (c, body) of
            [c, _] -> eval (c, While (cond, body))
        esac
  )
  | Array (exprs) -> (
        case evalList(c, exprs) of
            [c, arr] -> [c, listArray(arr)]
        esac
  )
  | Elem (arrExpr, indexExpr) -> (
        case eval (c, arrExpr) of
            [c, arr] -> case eval (c, indexExpr) of
                [c, index] -> case arr of
                      Sexp (_, arr) -> [c, arr[index]]
                    | _ -> [c, arr[index]]
                esac
            esac
        esac
  )
  | ElemRef (arrExpr, indexExpr) -> (
        case eval (c, arrExpr) of
            [c, arr] -> case eval (c, indexExpr) of
                [c, index] -> case arr of
                      Sexp (_, arr) -> [c, ElemRef (arr, index)]
                    | _ -> [c, ElemRef (arr, index)]
                esac
            esac
        esac
  )
  | Builtin (name, args) -> (
        case evalList (c, args) of
            [c, evaluatedArgs] -> case evalBuiltin (name, evaluatedArgs, w) of
                [v, newWorld] -> [[s, newWorld], v]
            esac
        esac
  )
  | String (x)      -> [c, x]
  | Sexp(name, xs)  -> case evalList (c, xs) of [c, vs] -> [c, Sexp (name, listArray (vs))] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
