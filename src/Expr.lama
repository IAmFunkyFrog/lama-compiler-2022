-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
      Const (n)        -> [c, Value (n)]
    | Var (x)          -> [c, Value (s(x))] -- FIXME for undefined "x"s returns Some (0)
    | Ref (x)          -> [c, Ref (x)]
    | Ignore (e)    -> case eval (c, e) of [c, _] -> [c, None] esac
    | Binop (op, l, r) -> (
        case eval (c, l) of
            [c, Value (lvalue)] -> case eval (c, r) of
                [c, Value (rvalue)] -> [c, Value (evalOp (op, lvalue, rvalue))]
                | _ -> failure ("Should not reach")
            esac
            | _ -> failure ("Should not reach")
        esac
    )
    | Skip             -> [c, None]
    | Assn (l, r)      -> (
        case eval (c, l) of
            [c, Ref (x)] -> case eval (c, r) of
                [[s, w], Value (v)] -> [[s <- [x, v], w], Value (v)]
                | _ -> failure ("Should not reach")
            esac
            | _ -> failure ("Should not reach")
        esac
    )
    | Read (x)         -> (
        case readWorld(w) of
            [v, newWorld] -> [[s <- [x, v], newWorld], None]
        esac
    )
    | Write (e)        -> (
        case eval (c, e) of
            [[s, w], Value (v)] -> [[s, writeWorld (v, w)], None]
            | _ -> failure ("Should not reach")
        esac
    )
    | Seq (e1, e2)     -> (
        case eval (c, e1) of
            [c, _] -> eval (c, e2)
        esac
    )
    | If (cond, thenB, elseB) -> (
        case eval (c, cond) of
            [c, Value (v)] -> if v then eval (c, thenB) else eval (c, elseB) fi
            | _ -> failure ("Should not reach")
        esac
    )
    | While (cond, body)      -> (
        case eval (c, cond) of
            [c, Value (v)] ->
                if v then case eval (c, body) of [c, _] ->
                     eval (c, expr)
                esac
                else [c, None] fi
            | _ -> failure ("Should not reach")
        esac
    )
    | DoWhile (body, cond)    -> (
        case eval (c, body) of
            [c, _] -> eval (c, While (cond, body))
        esac
    )
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
